[workspace]
resolver = "2"

members = [
    "queng_common/*",
    "queng_components/*",
    "queng_extensions/*",
    "queng_integration/data/*",
    "queng_macros/*",
    "queng_system_ims_client/*",
    "queng_system_ims_config/*",
    "queng_system_ims_data/*/*",
    "queng_sbe/*",
    "queng_template/*",
    "queng_traits/*",
    "queng_utils_test/*",
]
exclude = [
    "queng_sbe/sbe_schema",
]

[workspace.package]
edition = "2024"
rust-version = "1.85.0"
readme = "README.md"
repository = "https://github.com/marvin-hansen/iggy-streaming-system"
authors = ["Marvin Hansen <marvin.hansen@gmail.com>"]
license = "Apache-2.0"


# Linting with clippy
[workspace.lints.clippy]
all = "warn"

# Linting with rust
[workspace.lints.rust]
# Warnings
deprecated-safe = "warn"
deprecated_safe_2024 = "warn"


[workspace.dependencies]
# ==============
# Internal Aliases
# ==============

# Clients
ims_data_client = { path = "queng_system_ims_client/ims_data_client" }
# Configs
ims_iggy_config = { path = "queng_system_ims_config/ims_iggy_config" }

# Common
common_config = { path = "queng_common/common_config" }
common_data_bar = { path = "queng_common/common_data_bar" }
common_env = { path = "queng_common/common_env" }
common_errors = { path = "queng_common/common_errors" }
common_exchange = { path = "queng_common/common_exchange" }
common_ims = { path = "queng_common/common_ims" }
common_platform = { path = "queng_common/common_platform" }
common_sbe_errors = { path = "queng_common/common_sbe_errors" }
common_service = { path = "queng_common/common_service" }

# Components
config_manager = { path = "queng_components/config_manager" }
environment_manager = { path = "queng_components/environment_manager" }

# Extensions
client_error_ext = { path = "queng_extensions/client_error_ext" }
common_data_bar_ext = { path = "queng_extensions/common_data_bar_ext" }
#cow_ext = { path = "queng_extensions/cow_ext" }
data_error_ext = { path = "queng_extensions/data_error_ext" }
iggy_producer_ext = { path = "queng_extensions/iggy_producer_ext" }

# Integration
# Data integration
binance_coin_futures_data_integration = { path = "queng_integration/data/binance_coin_futures_data_integration" }
binance_coin_futures_testnet_data_integration = { path = "queng_integration/data/binance_coin_futures_testnet_data_integration" }
binance_core_data_integration = { path = "queng_integration/data/binance_core_data_integration" }
binance_spot_data_integration = { path = "queng_integration/data/binance_spot_data_integration" }
binance_spot_testnet_data_integration = { path = "queng_integration/data/binance_spot_testnet_data_integration" }
binance_usd_futures_data_integration = { path = "queng_integration/data/binance_usd_futures_data_integration" }
binance_usd_futures_testnet_data_integration = { path = "queng_integration/data/binance_usd_futures_testnet_data_integration" }

# Macros
data_integration_macro = { path = "queng_macros/data_integration_macro" }

# SBE
sbe_bindings = { path = "queng_sbe/sbe_bindings" }
sbe_messages_client = { path = "queng_sbe/sbe_messages_client" }
sbe_messages_control = { path = "queng_sbe/sbe_messages_control" }
sbe_messages_data = { path = "queng_sbe/sbe_messages_data" }
sbe_types = { path = "queng_sbe/sbe_types" }

# Template for microservices in /queng_system_ims_data
ims_data_service = { path = "queng_template/ims_data_service" }

# Traits
trait_data_integration = { path = "queng_traits/trait_data_integration" }

# Utils for integration testing
iggy_test_utils = { path = "queng_utils_test/iggy_test_utils" }

# ==============
# External crates
# ==============

# Proc Macro Dependencies
async-trait = { version = "0.1" }
enum_dispatch = { version = "0.3" }
trait-variant = { version = "0.1" }
quote = "1.0"
syn = { version = "2.0", features = ["full", "extra-traits"] }
# Dependencies for integration tests
service_utils = { version = "0.2" }
# Regular dependencies
bytes = { version = "1.8" }
chrono = { version = "0.4.38", features = ["serde"] }
rust_decimal = { version = "1.36" }
futures = { version = "0.3" }
futures-util = { version = "0.3" }
reqwest = { version = "0.12", default-features = false, features = ["rustls-tls", "json", "blocking", "gzip"] }
iggy = { version = "0.6.201"}
mimalloc = { version = "0.1" }
serde = { version = "1.0", features = ["derive"] }
serde_json = { version = "1.0" }
rustls = { version = "0.23.23", features = ["ring"] }
tokio = { version = "1.43", default-features = false, features = ["macros", "net", "rt-multi-thread", "signal", "time"] }
tokio-util = { version = "0.7", default-features = false }
tokio-tungstenite = { version = "0.26", features = ["rustls-tls-webpki-roots"] }
warp = { version = "0.3", default-features = false }

# Optimize all crates
[profile.release]
opt-level = 3
strip = true  # Automatically strip debug symbols from the binary
lto = true    # Enable Link Time Optimization (LTO)
codegen-units = 1 # Reduce Parallel Code Generation Units to Increase Optimization

# There's a Cargo feature named profile-overrides
# that lets you override the optimization level of dependencies.
# https://docs.rust-embedded.org/book/unsorted/speed-vs-size.html
[profile.release.package."*"]
opt-level = 3
strip = 'debuginfo'  # Automatically strip debug infos from the binary to reduce size
codegen-units = 1 # Reduce Parallel Code Generation Units to Increase Optimization
